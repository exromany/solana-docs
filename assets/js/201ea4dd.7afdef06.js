"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2368],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,k=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(k,l(l({ref:n},u),{},{components:t})):a.createElement(k,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),r=t(6010);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),r=t(7294),o=t(6010),l=t(2389),i=t(7392),s=t(7094),c=t(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){var n,t;const{lazy:l,block:p,defaultValue:m,values:k,groupId:f,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=k?k:b.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,i.l)(h,((e,n)=>e.value===n.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===m?m:null!=(n=null!=m?m:null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)?n:b[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:S}=(0,s.U)(),[T,N]=(0,r.useState)(v),O=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=f){const e=w[f];null!=e&&e!==T&&h.some((n=>n.value===e))&&N(e)}const x=e=>{const n=e.currentTarget,t=O.indexOf(n),a=h[t].value;a!==T&&(E(n),N(a),null!=f&&S(f,String(a)))},C=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var a;const n=O.indexOf(e.currentTarget)+1;t=null!=(a=O[n])?a:O[0];break}case"ArrowLeft":{var r;const n=O.indexOf(e.currentTarget)-1;t=null!=(r=O[n])?r:O[O.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},g)},h.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>O.push(e),onKeyDown:C,onFocus:x,onClick:x},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),l?(0,r.cloneElement)(b.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function m(e){const n=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},6400:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=t(7462),r=(t(7294),t(3905)),o=t(5488),l=t(5162);const i={},s="Staking & UnStaking",c={unversionedId:"frontend-integration/sdk/stake",id:"frontend-integration/sdk/stake",title:"Staking & UnStaking",description:"---",source:"@site/docs/frontend-integration/sdk/stake.mdx",sourceDirName:"frontend-integration/sdk",slug:"/frontend-integration/sdk/stake",permalink:"/frontend-integration/sdk/stake",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"solidoSidebar",previous:{title:"All methods",permalink:"/frontend-integration/sdk/sdk-methods"},next:{title:"Staking on Solana",permalink:"/internals/solana-staking"}},u={},d=[{value:"1. Initialize the library",id:"1-initialize-the-library",level:3},{value:"2. Call stake method",id:"2-call-stake-method",level:3},{value:"2. Prepare stake transaction",id:"2-prepare-stake-transaction",level:3},{value:"3. Sign and confirm transaction",id:"3-sign-and-confirm-transaction",level:3},{value:"2. Prepare stake transaction",id:"2-prepare-stake-transaction-1",level:3},{value:"3. Sign and confirm transaction",id:"3-sign-and-confirm-transaction-1",level:3}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"staking--unstaking"},"Staking & UnStaking"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"1-initialize-the-library"},"1. Initialize the library"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { SolidoSDK } from '@lidofinance/solido-sdk';\nimport { Connection } from '@solana/web3.js';\n\n// Change rpc endpoint to yours, or whole connection\nconst connection = new Connection('https://test.rpcpool.com');\n\nconst solidoSDK = new SolidoSDK('mainnet-beta', connection, 'your_solana_referral_address');\n")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"easy-way",label:"Easiest way",mdxType:"TabItem"},(0,r.kt)("h3",{id:"2-call-stake-method"},"2. Call stake method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const transactionHash = await solidoSDK.stake({\n    amount: 20, // The amount of SOL-s which need to stake\n    wallet: wallet, // Wallet instance\n    setTxStage: setTxStageCallback, // Optional callback for getting information about transaction stage (see TX_STAGE)\n  });\n} catch (e) {\n  // Handle Errors\n}\n"))),(0,r.kt)(l.Z,{value:"detailed-way",label:"Detailed way",mdxType:"TabItem"},(0,r.kt)("h3",{id:"2-prepare-stake-transaction"},"2. Prepare stake transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const stakeTransaction = await solidoSDK.getStakeTransaction({\n    amount: 20, // The amount of SOL-s which need to stake\n    payerAddress: new PublicKey(wallet.publicKey),\n  });\n} catch (e) {\n  // Handle Errors\n}\n")),(0,r.kt)("h3",{id:"3-sign-and-confirm-transaction"},"3. Sign and confirm transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const transactionHash = await solidoSDK.signAndConfirmTransaction({\n    transaction: stakeTransaction,\n    wallet: wallet, // Wallet instance\n    setTxStage: setTxStageCallback, // Optional callback for getting information about transaction stage (see TX_STAGE)\n  });\n} catch (e) {\n  // Handle Errors\n}\n"))),(0,r.kt)(l.Z,{value:"profi-way",label:"Profi way",mdxType:"TabItem"},(0,r.kt)("h3",{id:"2-prepare-stake-transaction-1"},"2. Prepare stake transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const stakeTransaction = await solidoSDK.getStakeTransaction({\n    amount: 20, // The amount of SOL-s which need to stake\n    payerAddress: new PublicKey(wallet.publicKey),\n  });\n} catch (e) {\n  // Handle Errors\n}\n")),(0,r.kt)("h3",{id:"3-sign-and-confirm-transaction-1"},"3. Sign and confirm transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  // Do something before singing transaction\n  const signed = await wallet.signTransaction(stakeTransaction);\n\n  const transactionHash = await connection.sendRawTransaction(signed.serialize());\n\n  // Do something before confirming transaction\n  const { value: status } = await connection.confirmTransaction(transactionHash);\n\n  if (status?.err) {\n    throw status.err;\n  }\n\n  // Do something after getting success transaction\n} catch (e) {\n  // Handle Errors\n}\n")))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You may get exception if amount exceed maximum available SOL-s in balance. In order to prevent this exception, you can call"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const maxStakeAmount = await solidoSDK.calculateMaxStakeAmount(new PublicKey(wallet.publicKey));\n"))),(0,r.kt)("h1",{id:"unstaking"},"Unstaking"),(0,r.kt)("p",null,"Unstaking process if whole the same as staking, also arguments are the same, just methods rename:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getStakeTransaction")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"getUnStakeTransaction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"calculateMaxStakeAmount")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"calculateMaxUnStakeAmount")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stake")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"unStake"))),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"enum TX_STAGE {\n  AWAITING_SIGNING = 1,\n  AWAITING_BLOCK = 2,\n  SUCCESS = 3,\n  ERROR = 4,\n}\n")))}m.isMDXComponent=!0}}]);